# -*- coding: utf-8 -*-
"""Car Price Predictor - Corrected Code

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jPxeOySl7YwV5U-qpOU1uNs4x2gv24tB
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn import metrics
import datetime

# --- 1. Load and Inspect Data ---
# Load the dataset from the 'cardata.csv' file.
# Ensure this file is in the same directory as your script.
try:
    df = pd.read_csv('cardata.csv')
    print("Dataset loaded successfully.")
except FileNotFoundError:
    print("Error: 'cardata.csv' not found. Please make sure the dataset file is in the correct folder.")
    exit()

print("\n--- Initial Data Info ---")
df.info()
print("\n--- First 5 Rows of Data ---")
print(df.head())
print("\n--- Statistical Summary ---")
print(df.describe())
print("\n--- Checking for Missing Values ---")
# This confirms the dataset is clean with no missing values.
print(df.isnull().sum())


# --- 2. Data Preprocessing & Feature Engineering ---
# This section prepares the data for the model.

# Drop the 'Car_Name' column. It has too many unique values to be useful
# for a simple linear regression model and would add unnecessary complexity.
df_processed = df.drop(columns=['Car_Name'])

# Feature Engineering: Create an 'Age' feature.
# This is more intuitive for a model than 'Year'.
# We calculate it dynamically so the script doesn't become outdated.
current_year = datetime.datetime.now().year
df_processed['Age'] = current_year - df_processed['Year']
df_processed = df_processed.drop(columns=['Year'])

# Correctly handle categorical variables using one-hot encoding.
# This is the proper way to convert text categories into a numerical format
# that the model can understand, avoiding the error of manual replacement.
# `drop_first=True` is used to avoid multicollinearity.
df_processed = pd.get_dummies(df_processed, columns=['Fuel_Type', 'Seller_Type', 'Transmission'], drop_first=True)

print("\n--- Data After Preprocessing and Feature Engineering ---")
print(df_processed.head())


# --- 3. Exploratory Data Analysis (EDA) ---
# This helps us understand the relationships in our data.

# Create a correlation heatmap for the processed numerical features.
plt.figure(figsize=(12, 8))
sns.heatmap(df_processed.corr(), annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Correlation Matrix of All Features')
plt.tight_layout()
plt.savefig('correlation_heatmap.png')
plt.close() # Close the plot to save memory


# --- 4. Model Training ---
# Now we build and train our prediction model.

# Define features (X) and the target variable (y).
X = df_processed.drop(columns=['Selling_Price'])
y = df_processed['Selling_Price']

# Split the data into a training set (to teach the model) and a testing set
# (to evaluate its performance on unseen data).
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize the Linear Regression model.
model = LinearRegression()

# Train the model using the training data.
model.fit(X_train, y_train)

print(f"\nModel training completed successfully!")


# --- 5. Model Evaluation ---
# Here we check how well our model performs.

# Make predictions on the test data.
y_pred = model.predict(X_test)

# Calculate and print the key evaluation metrics.
mae = metrics.mean_absolute_error(y_test, y_pred)
mse = metrics.mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)
r2 = metrics.r2_score(y_test, y_pred)

print("\n--- Model Evaluation Metrics ---")
print(f"R-squared (R2) Score:      {r2:.2f}")
print(f"Mean Absolute Error (MAE):   {mae:.2f}")
print(f"Mean Squared Error (MSE):    {mse:.2f}")
print(f"Root Mean Squared Error (RMSE): {rmse:.2f}")


# --- 6. Visualization of Results ---
# Visuals make it easier to understand the model's performance.

# Create a scatter plot to compare actual prices vs. predicted prices.
plt.figure(figsize=(10, 6))
sns.regplot(x=y_test, y=y_pred, scatter_kws={'alpha':0.6}, line_kws={'color':'red', 'ls':'--'})
plt.xlabel('Actual Price (in Lakhs)')
plt.ylabel('Predicted Price (in Lakhs)')
plt.title('Actual vs. Predicted Car Prices')
plt.grid(True)
plt.tight_layout()
plt.savefig('actual_vs_predicted.png')
plt.close()

print("\nSuccessfully generated 'correlation_heatmap.png' and 'actual_vs_predicted.png'.")
print("Project script finished.")


# --- 7. Test with a Single Prediction ---
# You can change the values in the dictionary below to test different cars.

print("\n---------------------------------")
print("--- Testing with a single car ---")
print("---------------------------------")

# Create a dictionary with the details of the car you want to predict.
# Let's test a 2016 Manual Petrol car sold by an Individual.
new_car_details = {
    'Present_Price': 5.5,  # Current showroom price in Lakhs
    'Kms_Driven': 35000,   # Total kilometers driven
    'Owner': 0,            # Number of previous owners
    'Year': 2016,          # Year of manufacture
    'Fuel_Type': 'Petrol', # 'Petrol', 'Diesel', or 'CNG'
    'Seller_Type': 'Individual', # 'Dealer' or 'Individual'
    'Transmission': 'Manual' # 'Manual' or 'Automatic'
}

# Convert the dictionary to a pandas DataFrame
test_car_df = pd.DataFrame([new_car_details])

# --- Apply the SAME preprocessing as the training data ---

# 1. Create the 'Age' feature
test_car_df['Age'] = current_year - test_car_df['Year']
test_car_df = test_car_df.drop(columns=['Year'])

# 2. One-hot encode the categorical features
test_car_df = pd.get_dummies(test_car_df, columns=['Fuel_Type', 'Seller_Type', 'Transmission'], drop_first=True)

# 3. Align the columns of the test data with the training data
# This is a crucial step to ensure our test car has the exact same columns
# (in the same order) as the data the model was trained on.
# Any missing columns in our test car data will be added and filled with 0.
model_columns = X_train.columns
test_car_df = test_car_df.reindex(columns=model_columns, fill_value=0)


# --- Make the prediction ---
final_prediction = model.predict(test_car_df)

print(f"\nDetails of the car to be predicted: \n{new_car_details}")
print("\n---------------------------------")
print(f"Predicted Selling Price: {final_prediction[0]:.2f} Lakhs")
print("---------------------------------")

